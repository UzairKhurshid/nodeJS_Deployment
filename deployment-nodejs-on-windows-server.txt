Some of the advantages of hosting node.js applications in IIS using the iisnode module as opposed to self-hosting node.exe processes include:

	(i): Process management. The iisnode module takes care of lifetime management of node.exe processes making it simple to improve overall reliability. 
	You don’t have to implement infrastructure to start, stop, and monitor the processes.
	
	(ii): Scalability on multi-core servers. Since node.exe is a single threaded process, it only scales to one CPU core. The iisnode module allows 
	creation of multiple node.exe processes per application and load balances the HTTP traffic between them, therefore enabling full utilization
	 of a server’s CPU capacity without requiring additional infrastructure code from an application developer.
	
	(iii): Auto-update. The iisnode module ensures that whenever the node.js application is updated (i.e. the script file has changed), 
	the node.exe processes are recycled. Ongoing requests are allowed to gracefully finish execution using the old version of the application, w
	hile all new requests are dispatched to the new version of the app.
	
	(iv): Access to logs over HTTP. The iisnode module provides access the output of the node.exe process (e.g. generated by console.log calls) via HTTP. 
	This facility is key in helping you debug node.js applications deployed to remote servers.

	(v): Side by side with other content types. The iisnode module integrates with IIS in a way that allows a single web site to contain a variety of 
	content types. For example, a single site can contain a node.js application, static HTML and JavaScript files, PHP applications, and ASP.NET 
	applications. This enables choosing the best tools for the job at hand as well progressive migration of existing applications.
	
	(vi): Minimal changes to node.js application code. The iisnode module enables hosting of existing HTTP node.js applications with very minimal changes.
	Typically all that is required is to change the listed address of the HTTP server to one provided by the iisnode module via the process.env.PORT 
	environment variable.

	(vii): Integrated management experience. The issnode module is fully integrated with IIS configuration system and uses the same tools and mechanism as
	 other IIS components for configuration and maintenance.
	In addition to benefits specific to the iisnode module, hosting node.js applications in IIS allows the developer to benefit from a range of IIS 
	features, among them:

	port sharing (hosting multiple HTTP applications over port 80)
	security (HTTPS, authentication and authorization)
	URL rewriting
	compression
	caching
	logging






Deployment:
	in your project set port to process.env.port
 	becuse iis will define the port itself
	(i)downlaod iisnode and install it .
	(ii)turn on windows internet information service from ( turn on / off windows feature ).
		expand this feature and select all features.
	(iii)open iis manager.
	(iv)download url Rewrite and install it . 
	(v)to check iisnode 
		open c program files where iisnode is loacted open this directory from cmd and run setupsamples.bat file
		cd "C:\Program Files"
		cd iisnode
		setupsamples.bat
	(vi)copy your project in ==> C:\inetpub\    
	(vii) open iis manager and from left panel right click on sites and add new site
	     	
		fill site name physical location and host name 
		host name will be like localhost if you set diffrenet host name also update it in
	      	c:\Windows\System32\Drivers\etc\hosts     at the end of file add your host name 
	      	like this  127.0.0.1 testNode.com 
	(vii) open url testNode.com in browser or click on browse from iis manager.














	https://docs.microsoft.com/en-us/troubleshoot/iis/http-403-14-forbidden-webpage
	Above link: solution for errors in deployment node js application on windows using iis
	Error:
		(i)HTTP Error 401.3 - Unauthorized
		Sol:give permission to user from folder right click on properties => security
		(ii)HTTP Error 403.14 - Forbidden
		The Web server is configured to not list the contents of this directory.
		Sol:by enabling directory browsing you can let client browsers to display list of content in directory
		in features double click on directory browsing and enable it.
		(iii)A default document is not configured for the requested URL
		Sol:   	The answer marked will help you eliminate the error but it will not get MVC working. The answer to the problem is to add this line to the web.config file
			in system.webServer:
			<modules runAllManagedModulesForAllRequests="true" /> 